name: build
on: pull_request
jobs:
  build:
    runs-on: red-candle-runner
    steps:
      - uses: actions/checkout@v3
      
      # Cache Rust dependencies
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            tmp
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      # Cache HuggingFace models to avoid rate limiting
      # Uses default hf_hub cache location: ~/.cache/huggingface/hub
      # Models are pre-downloaded after compilation to ensure proper cache structure
      - name: Cache HuggingFace models
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/huggingface
            /home/runner/.cache/huggingface
          key: ${{ runner.os }}-huggingface-models-v2-${{ hashFiles('test/model_manifest.txt') }}
          restore-keys: |
            ${{ runner.os }}-huggingface-models-v2-

      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: ruby
          bundler-cache: true

      - name: Display Memory Usage
        run: free -h

      - name: Display Disk Space Before Test
        run: df -h

      - name: Install Valgrind
        run: sudo apt-get update && sudo apt-get install -y valgrind

      # Compile the native extension first
      - name: Compile native extension
        run: bundle exec rake compile

      # Pre-download models if not cached
      - name: Pre-download test models
        run: |
          echo "Pre-downloading models to avoid rate limits..."
          
          # Check if we have a good cache
          if [ -d ~/.cache/huggingface/hub ] && [ "$(ls -A ~/.cache/huggingface/hub/models--* 2>/dev/null | wc -l)" -gt 5 ]; then
            echo "✓ Found existing cache with models"
            echo "Models cached: $(ls -d ~/.cache/huggingface/hub/models--* 2>/dev/null | wc -l)"
            echo "Cache size: $(du -sh ~/.cache/huggingface 2>/dev/null | cut -f1)"
          else
            echo "⚠ Cache incomplete or missing, downloading models..."
            # Download models using Candle (requires compiled extension)
            # Use HF_TOKEN for higher rate limits
            bundle exec ruby script/download_test_models.rb
          fi
        env:
          HF_TOKEN: ${{ secrets.HF_TOKEN }}

      - name: Run tests with Valgrind Massif (Peak Memory)
        run: |
          # If we have a good cache, use offline mode to avoid API calls entirely
          if [ -d ~/.cache/huggingface/hub ] && [ "$(ls -A ~/.cache/huggingface/hub/models--* 2>/dev/null | wc -l)" -gt 5 ]; then
            echo "Using HF_HUB_OFFLINE mode with cached models"
            export HF_HUB_OFFLINE=1
          fi
          
          valgrind --tool=massif --massif-out-file=massif.out bundle exec rake test
        env:
          HF_TOKEN: ${{ secrets.HF_TOKEN }}

      - name: Display Peak Memory Usage
        run: |
          ms_print massif.out | head -n 30

      - name: Display Disk Space After Test
        run: df -h

      - run: bundle exec yard --fail-on-warning --readme README.md --markup markdown --markup-provider redcarpet